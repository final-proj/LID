<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

    <!-- 
   <resultMap id="resultMember" type="member">
      
      <result property="hobby" column="hobby" typeHandler="strArrTypeHandler" />
      
   </resultMap>
    -->
   
   <select id="selectMember" parameterType="string" resultType="member">
      SELECT * FROM MEMBER WHERE MEMAIL = #{mEmail}
   </select>
   
   <select id="checkEmail" parameterType="member" resultType="member">
      SELECT * FROM MEMBER WHERE MEMAIL = #{mEmail} AND MNAME = #{mName}
   </select>
   
   
   
   <insert id="insertMember" parameterType="member" >
      
      INSERT INTO MEMBER VALUES(
         SEQ_MEMBER.NEXTVAL, #{mEmail}, #{mPwd},
         #{mName}, #{mPhone}, SYSDATE, DEFAULT, DEFAULT, DEFAULT)
         
         <!-- <selectKey keyProperty="mNo" resultType="_int" order="BEFORE">
			SELECT SEQ_MEMBER.CURRVAL FROM DUAL
		</selectKey> -->
         
   </insert>
   
   <!-- 
   <update id="updateMember" parameterType="member" >
      
      UPDATE MEMBER SET
         USERNAME = #{userName}, PASSWORD = #{password}, EMAIL = #{email}, AGE = #{age}, PHONE = #{phone},
         ADDRESS = #{address}, GENDER = #{gender}, HOBBY = #{hobby, typeHandler=strArrTypeHandler}
      WHERE USERID = #{userId}
   
   </update>
    -->
    <!--
   <delete id="deleteMember" parameterType="string">
   
      DELETE FROM MEMBER WHERE MEMAIL = #{mEmail}
   
   </delete>
   
    -->
   
   <select id="checkIdDuplicate" statementType="CALLABLE" parameterType="hashmap">
      { CALL ID_DUP_CHK( 
         #{mEmail, mode=IN, jdbcType=VARCHAR}, 
         #{result, mode=OUT, jdbcType=NUMERIC, javaType=integer} ) 
        }
   </select>
   
   <!-- 회원정보 삭제 -->
	<delete id="deleteMember" parameterType="string" >
		DELETE FROM MEMBER
		WHERE MEMAIL = #{mEmail}
	</delete>
   
   <!-- =============================================  -->
   <!-- 비밀번호 변경 (setting View)  -->
   <update id="updatePwd" parameterType="member">
   		UPDATE MEMBER SET MPWD = #{mPwd}
   		WHERE MEMAIL = #{mEmail}
   </update>
   
   <!-- 회원 등급 변경 -->
   <update id="updateLevel" parameterType="_int">
   	UPDATE MEMBER SET MLEVEL = '유료회원' WHERE MNO = #{mNo}
   
   </update>
   
  <!-- 가난으로 돌아가기 -->
  <update id="returnLevel" parameterType="_int">
  UPDATE MEMBER SET MLEVEL ='일반회원' WHERE MNO = #{mNo}
  </update>
   <!-- 임시비밀번호 발급 -->
   <update id="updatePassword" parameterType="member">
   		UPDATE MEMBER SET MPWD = #{mPwd}
   		WHERE MEMAIL = #{mEmail}
   </update>
   
   
   <!-- 이메일 인증을 위한 키값 DB 저장 -->
	<update id="createAuthKey" parameterType="member">
		UPDATE MEMBER SET MAUTHCODE = #{mAuthCode} WHERE MEMAIL = #{mEmail}
	</update>
	
	<update id="checkAuth" parameterType="member">
		UPDATE MEMBER SET CHECKAUTH = 1 WHERE MEMAIL = #{mEmail}
	</update>
   

</mapper>